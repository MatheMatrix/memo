#!/usr/bin/env python3

import infinit.beyond.bottle

import bottle
import unittest
import urllib.parse

from utils import *

class OAuth(bottle.Bottle):

  def __init__(self, beyond, use_indexing = False):
    super().__init__()
    self.beyond = beyond
    self.route('/oauth-token', method = 'POST')(self.token)
    self.route('/info')(self.info)
    if use_indexing:
      self.index = 0
    else:
      self.index = ''
    self.tokens = {}

  def __enter__(self):
    res = super().__enter__()
    self.exchange_url = "%s/oauth-token" % self.host
    self.info_url = "%s/info" % self.host
    return res

  def validate_request(self):
    assertEq(bottle.request.query['code'][:len('secret_code')], 'secret_code')
    assertEq(bottle.request.query['grant_type'], 'authorization_code')

  def token(self):
    self.validate_request()
    if not isinstance(self.index, str):
      self.index += 1
    return {
      'access_token': "secret_token%s" % self.index
    }

  def info(self):
    token = bottle.request.query['access_token']
    l = len('secret_token')
    assertEq(token[:l], "secret_token")
    if len(token) != l:
      assert int(token[l:]) <= self.index
    return {
      'uid': 'user%s' % self.index,
      'display_name': 'user_display-name%s' % self.index,
      'email': 'em%s@il.com' % self.index,
      'name': 'name%s' % self.index,
      'user': {
        'emailAddress': 'em%s@il.com' % self.index,
      }
    }

  @property
  def host(self):
    return super().host

class DummyDropbox(OAuth):

  def __init__(self, host, use_indexing = False):
    super().__init__(host, use_indexing)

  def __enter__(self):
    res = super().__enter__()
    self.form_url = "%s/dropbox-oauth-form" % self.host
    return res

  def __validate_request(self):
    super().validate_request()
    assertEq(bottle.request.query['client_secret'], 'db_secret')
    assertEq(bottle.request.query['client_id'], 'db_key')
    assertEq(bottle.request.query['redirect_uri'], '%s/oauth/dropbox' % self.host)

class DummyGoogle(OAuth):

  def __init__(self, host, type = 'google', use_indexing = False):
    super().__init__(host, use_indexing)
    self.type = type

  def __enter__(self):
    res = super().__enter__()
    self.form_url = "%s/google-oauth-form" % self.host
    return res

  def validate_request(self):
    super().validate_request()
    assertEq(bottle.request.query['client_secret'], 'google_secret')
    assertEq(bottle.request.query['client_id'], 'google_key')
    assertEq(bottle.request.query['redirect_uri'], '%s/oauth/%s' % (self.beyond, self.type))

with Beyond() as beyond, DummyDropbox(beyond.host, True) as db, \
     DummyGoogle(beyond.host, 'gcs', True) as gcs, \
     DummyGoogle(beyond.host, 'google', True) as google:
  conf = infinit.beyond.bottle.Bottle._Bottle__oauth_services
  conf['dropbox']['form_url'] = db.form_url
  conf['dropbox']['exchange_url'] = db.exchange_url
  conf['dropbox']['info_url'] = db.info_url

  conf['gcs']['form_url'] = gcs.form_url
  conf['gcs']['exchange_url'] = gcs.exchange_url
  conf['gcs']['info_url'] = gcs.info_url

  conf['google']['form_url'] = google.form_url
  conf['google']['exchange_url'] = google.exchange_url
  conf['google']['info_url'] = google.info_url

  class Test(unittest.TestCase):

    def test_delete_unknown_credentials(self):
      user = User()
      user.put(beyond)
      throws(lambda: beyond.delete('oauth/%s/dropbox' % user['name'],
                                   auth = user),
             404,
             json = False)
      throws(lambda: beyond.delete('oauth/%s/dropbox/foo' % user['name'],
                                   auth = user),
             404,
             json = False)

    def test_delete_credentials(self):
      user = User()
      user.put(beyond)
      for service, credentials in [(
          'dropbox', {
            'credentials': [
              {
                'uid': 'user1',
                'token': 'secret_token1',
                'refresh_token': '',
                'display_name': 'user_display-name1'
              }
          ]}
      ), (
        'gcs', {
          'credentials': [
            {
              'uid': 'em1@il.com',
              'refresh_token': '',
              'token': 'secret_token1',
              'display_name': 'name1'
            }
          ]}
      ), (
        'google', {
          'credentials': [
            {
              'uid': 'em1@il.com',
              'refresh_token': '',
              'token': 'secret_token1',
              'display_name': 'name1'
            }
          ]})
      ]:
        # Authenticate
        beyond.get('oauth/%s' % service, params = {
          'code': 'secret_codex',
          'state': user['name']}
        )
        # Check result.
        assertEq(beyond.get('users/%s/credentials/%s' % (user['name'], service),
                            auth = user).json(),
                 credentials)
        # Put a second one.
        beyond.get('oauth/%s' % service, params = {
          'code': 'secret_codex_1',
          'state': user['name']}
        )
        # Delete all credentials.
        beyond.delete('users/%s/credentials/%s' % (user['name'], service),
                      auth = user).json()
        # Check if no credentials remain.
        assertEq(beyond.get('users/%s/credentials/%s' % (user['name'], service),
                            auth = user).json(),
                 {'credentials': []})
        # Push two.
        beyond.get('oauth/%s' % service, params = {
          'code': 'secret_code_2',
          'state': user['name']}
        )
        beyond.get('oauth/%s' % service, params = {
          'code': 'secret_code_3',
          'state': user['name']}
        )
        # Check if we get two.
        res = beyond.get('users/%s/credentials/%s' % (user['name'], service),
                         auth = user).json()['credentials']
        assertEq(len(res), 2)
        # Delete the second one.
        beyond.delete('users/%s/credentials/%s/%s' % (user['name'], service, res[1]['uid']),
                      auth = user).json()
        # Check if only the first one remains.
        final = beyond.get('users/%s/credentials/%s' % (user['name'], service),
                           auth = user).json()['credentials']
        assertEq(final[0], res[0])
      ## Delete google credentials and make sure the other one are preserved.
      gc = beyond.get('users/%s/credentials/google' % user['name'],
                      auth = user).json()['credentials']
      # Actually delete google credentials.
      beyond.delete('users/%s/credentials/google/%s' % (user['name'], gc[0]['uid']),
                    auth = user)
      # Check if it's gone.
      assertEq(len(beyond.get('users/%s/credentials/google' % user['name'],
                              auth = user).json()['credentials']),
               0)
      # Check if gcs is still present.
      assertEq(len(beyond.get('users/%s/credentials/gcs' % user['name'],
                              auth = user).json()['credentials']),
               1)
      # Same for dropbox.
      assertEq(len(beyond.get('users/%s/credentials/dropbox' % user['name'],
                              auth = user).json()['credentials']),
               1)

  if __name__ == '__main__':
    unittest.main()
