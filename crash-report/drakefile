import drake
import drake.cxx
import drake.debian
import drake.git
import os

lib_dynamic = None
lib_static = None
library = None

dump_syms_exe = None
minidump_stackwalk_exe = None
rule_tools = None

with open(str(drake.path_source('../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

## ------------ ##
## Dump Symbols ##
## ------------ ##

class SymbolsGenerator(drake.Builder):
  def __init__(self,
               dump_syms_tool,
               binary,
               output_file,
               cxx_toolkit):
    self.__dump_syms_tool = dump_syms_tool
    self.__binary = binary
    self.__output_file = output_file
    self.__cxx_toolkit = cxx_toolkit
    super().__init__(
      [self.__dump_syms_tool, self.__binary],
      [self.__output_file],
    )

  @property
  def dump_syms_cmd(self):
    return str(self.__dump_syms_tool.path())

  @property
  def binary_path(self):
    return str(self.__binary.path())

  def execute(self):
    out = self.__output_file
    # dump_syms sometimes crashes when we use dsymutil output.  For be
    # ready not to use it.
    with_dsym = [True, False] if self.__cxx_toolkit.os is drake.os.macos else [False]
    for dsym in with_dsym:
      if dsym and self.cmd('Generating debug symbols for %s' % self.__binary,
                           ['dsymutil', self.binary_path]):
        args = ['-g', self.binary_path + '.dSYM']
      else:
        args = []
      if self.cmd('Generating symbols file for %s' % self.__binary,
                  [self.dump_syms_cmd] + args + [self.binary_path],
                  redirect_stdout = out,
                  cut_stderr = True):
        return True
    return False

  def __repr__(self):
    return 'SymbolsGenerator(%s)' % self.__binary

  def __str__(self):
    return 'SymbolsGenerator(%s)' % self.__binary

class SymbolsCommit(drake.Builder):

  '''Commit debug symbol files to their git repo.'''

  def __init__(self, name, srcs,
               repo = None, description = None, platform = None, project = None):
    '''
    name -- name of the virtual node, say //symbols-commit.
    srcs -- the *.sym files to commit.
    repo -- the URL of the repository to use (read/write).
    description -- git describe.
    platform -- a string such as "macosx", etc.
    project -- name of the project, e.g., "memo".
    '''
    # Where the symbol files will be installed.
    self.__url = repo
    self.__project = project
    self.__specs = ('{description}/{platform}'
                    .format(description=description,
                            platform=platform))
    super().__init__(srcs, [name])

  def _sym_output_path(self, sym_file):
    '''The path under which `sym_file` must be installed for breakpad.'''
    res = None
    with open(str(sym_file), 'r') as f:
      line = f.readline()
      args = {
        'project': self.__project,
        'specs': self.__specs,
        'uid': line.split(' ')[3],
        'name': line.split(' ')[4].strip(),
      }
      assert args['name'] + '.sym' == os.path.basename(str(sym_file))
      return 'projects/{project}/{specs}/{name}/{uid}/{name}.sym'.format_map(args)

  def execute(self):
    import tempfile
    with tempfile.TemporaryDirectory() as repo:
      self.cmd('Clone symbols directory',
               ['git', 'clone', self.__url, repo],
               throw = True)

      # Returns True iff there are no diffs in the repo.
      no_diff = lambda: self.cmd('Check if there are diffs',
                                 ['git', '-C', repo,
                                  'diff', '--cached', '--quiet'])

      # The files added in the repo.
      import shutil
      files = []
      for source in self.sources():
        if source.extension.split('.')[-1] == 'sym':
          # Name relative to the repo.
          file = self._sym_output_path(source)
          files.append(file)
          # Path into the repo.
          dst = os.path.join(repo, file)
          os.makedirs(os.path.dirname(dst), exist_ok = True)
          shutil.copy(str(source), dst)

      self.cmd('Add new debug symbols',
               ['git', '-C', repo, 'add'] + files,
               throw = True)
      if no_diff():
        # Nothing to commit.
        return True

      self.cmd('Commit new debug symbols',
               ['git', '-C', repo,
                'commit', '-m', 'Symbols for {}'.format(self.__specs)],
               throw = True)

      self.cmd('Update symbols directory',
               ['bin/make-symbols'],
               cwd = repo,
               throw = True)

      if no_diff():
        # Nothing to commit.
        return True

      self.cmd('Commit symbols directory',
               ['git', '-C', repo,
                'commit', '-m', 'Regen symbols.'],
               throw = True)
      self.cmd('Push new debug symbols',
               ['git', '-C', repo,
                'push', 'origin', 'HEAD:master'],
               throw = True)
    return True

def configure(cxx_toolkit = None,
              cxx_config = drake.cxx.Config()):
  global lib_dynamic, lib_static, library
  global dump_syms_exe, rule_tools

  # //tools: build the auxiliary tools.
  rule_tools = drake.Rule('tools')

  ## -------- ##
  ## Breakpad ##
  ## -------- ##

  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config.add_local_include_path('breakpad/src')
  sources = [
    'client/minidump_file_writer.cc',
    'common/convert_UTF.h',
    'common/md5.cc',
    'common/md5.h',
    'common/string_conversion.cc',
    'common/string_conversion.h',
    'minidump_file_writer.h',
  ]
  breakpad_configure_args = []
  if cxx_toolkit.os is drake.os.linux:
    sources += [
      'client/linux/crash_generation/crash_generation_client.cc',
      'client/linux/crash_generation/crash_generation_client.h',
      'client/linux/dump_writer_common/thread_info.cc',
      'client/linux/dump_writer_common/thread_info.h',
      'client/linux/dump_writer_common/ucontext_reader.cc',
      'client/linux/dump_writer_common/ucontext_reader.h',
      'client/linux/handler/exception_handler.cc',
      'client/linux/handler/exception_handler.h',
      'client/linux/handler/minidump_descriptor.cc',
      'client/linux/handler/minidump_descriptor.h',
      'client/linux/log/log.cc',
      'client/linux/log/log.h',
      'client/linux/microdump_writer/microdump_writer.cc',
      'client/linux/microdump_writer/microdump_writer.h',
      'client/linux/minidump_writer/linux_dumper.cc',
      'client/linux/minidump_writer/linux_dumper.h',
      'client/linux/minidump_writer/linux_ptrace_dumper.cc',
      'client/linux/minidump_writer/linux_ptrace_dumper.h',
      'client/linux/minidump_writer/minidump_writer.cc',
      'client/linux/minidump_writer/minidump_writer.h',
      'common/linux/elfutils.cc',
      'common/linux/elfutils.h',
      'common/linux/file_id.cc',
      'common/linux/file_id.h',
      'common/linux/guid_creator.cc',
      'common/linux/guid_creator.h',
      'common/linux/linux_libc_support.cc',
      'common/linux/linux_libc_support.h',
      'common/linux/memory_mapped_file.cc',
      'common/linux/memory_mapped_file.h',
      'common/linux/safe_readlink.cc',
      'common/linux/safe_readlink.h',
    ]
    breakpad_sources = \
      drake.nodes(*['breakpad/src/%s' % f for f in sources])
    # File is not in repo unless you use Google's tools.
    breakpad_sources += drake.nodes(
      'src/third_party/lss/linux_syscall_support.h',
    )
    breakpad_include = (drake.Path(os.getcwd()) / drake.path_source('src')).canonize()
    breakpad_configure_args += [
      'CPPFLAGS=-I%s' % breakpad_include,
    ]
    dump_syms_exe = drake.cxx.Executable('breakpad/bin/dump_syms')
  elif cxx_toolkit.os is drake.os.macos:
    sources += [
      'client/mac/crash_generation/crash_generation_client.cc',
      'client/mac/crash_generation/crash_generation_client.h',
      'client/mac/handler/breakpad_nlist_64.cc',
      'client/mac/handler/breakpad_nlist_64.h',
      'client/mac/handler/dynamic_images.cc',
      'client/mac/handler/dynamic_images.h',
      'client/mac/handler/exception_handler.cc',
      'client/mac/handler/exception_handler.h',
      'client/mac/handler/minidump_generator.cc',
      'client/mac/handler/minidump_generator.h',
      'client/mac/handler/protected_memory_allocator.cc',
      'client/mac/handler/protected_memory_allocator.h',
      'common/mac/MachIPC.h',
      'common/mac/MachIPC.mm',
      'common/mac/bootstrap_compat.cc',
      'common/mac/bootstrap_compat.h',
      'common/mac/file_id.cc',
      'common/mac/file_id.h',
      'common/mac/macho_id.cc',
      'common/mac/macho_id.h',
      'common/mac/macho_utilities.cc',
      'common/mac/macho_utilities.h',
      'common/mac/macho_walker.cc',
      'common/mac/macho_walker.h',
      'common/mac/string_utilities.cc',
      'common/mac/string_utilities.h',
    ]
    local_cxx_config.framework_add('CoreFoundation')
    local_cxx_config.framework_add('CoreServices')
    breakpad_sources = \
      drake.nodes(*list(map(lambda f: 'breakpad/src/%s' % f, sources)))
    # Fix build with GCC.
    # This piece of code seems to be dead.
    if cxx_toolkit.kind is drake.cxx.GccToolkit.Kind.gcc:
      local_cxx_config.flag('-include')
      local_cxx_config.flag('crash-report/gcc_fix.hh')

    # The dump_syms tool is built with Xcode on Mac. Rather do it manually.
    dump_syms_sources = [
      'common/dwarf/bytereader.cc',
      'common/dwarf/bytereader.h',
      'common/dwarf/dwarf2diehandler.cc',
      'common/dwarf/dwarf2diehandler.h',
      'common/dwarf/dwarf2reader.cc',
      'common/dwarf/dwarf2reader.h',
      'common/dwarf_cfi_to_module.cc',
      'common/dwarf_cfi_to_module.h',
      'common/dwarf_cu_to_module.cc',
      'common/dwarf_cu_to_module.h',
      'common/dwarf_line_to_module.cc',
      'common/dwarf_line_to_module.h',
      'common/language.cc',
      'common/language.h',
      'common/mac/arch_utilities.cc',
      'common/mac/arch_utilities.h',
      'common/mac/dump_syms.cc',
      'common/mac/dump_syms.h',
      'common/mac/file_id.cc',
      'common/mac/file_id.h',
      'common/mac/macho_id.cc',
      'common/mac/macho_id.h',
      'common/mac/macho_reader.cc',
      'common/mac/macho_reader.h',
      'common/mac/macho_utilities.cc',
      'common/mac/macho_utilities.h',
      'common/mac/macho_walker.cc',
      'common/mac/macho_walker.h',
      'common/md5.cc',
      'common/md5.h',
      'common/module.cc',
      'common/module.h',
      'common/stabs_reader.cc',
      'common/stabs_reader.h',
      'common/stabs_to_module.cc',
      'common/stabs_to_module.h',
      'tools/mac/dump_syms/dump_syms_tool.cc',
    ]
    dump_syms_sources = \
      drake.nodes(*list(map(lambda f: 'breakpad/src/%s' % f, dump_syms_sources)))
    dump_syms_cxx_config = drake.cxx.Config(cxx_config)
    dump_syms_cxx_config.define('HAVE_MACH_O_NLIST_H')
    dump_syms_cxx_config.framework_add('CoreFoundation')
    dump_syms_cxx_config.add_local_include_path('breakpad/src')
    dump_syms_exe = drake.cxx.Executable(
      'breakpad/bin/dump_syms',
      dump_syms_sources,
      cxx_toolkit,
      dump_syms_cxx_config,
    )

  breakpad_sources += drake.nodes(
    # The default *.c extension makes Drake use a C compiler, which
    # does not like -std=c++14.
    'src/common/convert_UTF.cc',
  )

  breakpad_configure = drake.node('breakpad/configure')
  breakpad_configure_args += [
    '--prefix=%s' % str(drake.path_root() / drake.path_build('breakpad')),
    'CC=%s' % cxx_toolkit.c,
    'CXX=%s' % cxx_toolkit.cxx,
  ]
  global minidump_stackwalk_exe
  minidump_stackwalk_exe = drake.cxx.Executable('breakpad/bin/minidump_stackwalk')
  breakpad_targets = [
    minidump_stackwalk_exe,
    drake.cxx.Executable('breakpad/bin/minidump_dump'),
    drake.cxx.Executable('breakpad/bin/microdump_stackwalk'),
  ]
  if cxx_toolkit.os is drake.os.linux:
    breakpad_targets += [
      dump_syms_exe,
      drake.cxx.Executable('breakpad/bin/dump_syms_mac'),
    ]
  GNUBuilder(
    cxx_toolkit,
    configure = breakpad_configure,
    configure_args = breakpad_configure_args,
    sources = drake.nodes('breakpad/configure'),
    targets = breakpad_targets,
    build_args = ['install-binPROGRAMS'],
    working_directory = drake.path_build('breakpad/build'),
  )

  rule_tools << dump_syms_exe

  ## -------------- ##
  ## Crash Reporter ##
  ## -------------- ##

  local_cxx_config.add_local_include_path('src')
  sources = drake.nodes(
    'src/crash-report/CrashReporter.cc',
    'src/crash-report/CrashReporter.hh',
    'src/crash-report/fwd.hh',
  )

  lib_dynamic = drake.cxx.DynLib(
    'lib/crashreporter',
    breakpad_sources + sources,
    cxx_toolkit,
    local_cxx_config)
  lib_static = drake.cxx.StaticLib(
    'lib/crashreporter',
    breakpad_sources + sources,
    cxx_toolkit,
    local_cxx_config)

  if cxx_toolkit.os in [drake.os.windows]:
    library = lib_static
  else:
    library = lib_dynamic

# Local Variables:
# mode: python
# End:
