#!/usr/bin/env python3
# -*- python -*-

import drake, os

depname = 'drake.test.depname'
add = True
builder = None
deps = False
dyndeps = False
run = False

class DynNode(drake.Node):

  pass

def handler(b, path, type, data):

  global dyndeps
  global builder
  dyndeps = True
  assert b == builder
  assert path == 'src'
  assert type == DynNode
  return drake.node(path, type)

drake.Builder.register_deps_handler(depname, handler)

class DynBuilder(drake.Builder):

  def __init__(self, dst):

    drake.Builder.__init__(self, [], [dst])
    self.dst = dst

  def dependencies(self):

    global deps
    import sys
    deps = True
    if add:
      self.src = DynNode('src')
      self.add_dynsrc(depname, self.src)

  def execute(self):

    global run
    if add:
      os.system('cp %s %s' % (self.src, self.dst))
    else:
      os.system('touch %s' % (self.dst))
    run = True
    return True

def test():

  global add, builder, deps, dyndeps, run

  add = True
  builder = None
  deps = False
  dyndeps = False
  run = False

  drake.Path('src').touch()
  drake.Path('.drake').remove()

  with drake.Drake():
    # Check The dependency is added
    drake.reset()
    drake.Path('dst').remove()
    dst = drake.Node('dst')
    builder = DynBuilder(dst)
    dst.build()
    assert deps
    deps = False
    assert run
    run = False
    assert not dyndeps

    # Check The dependency is restored
    drake.reset()
    dst = drake.Node('dst')
    builder = DynBuilder(dst)
    dst.build()
    assert dyndeps
    dyndeps = False
    assert not deps
    assert not run

    # Check The dependency is discarded
    drake.reset()
    dst = drake.Node('dst')
    builder = DynBuilder(dst)
    assert drake.Path('src').exists()
    drake.Path('src').remove()
    add = False
    dst.build()

test()
