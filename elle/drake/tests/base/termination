#!/usr/bin/env python3

'''Check an interrupted build is not considered to have run
successfully later.'''

import drake
import drake.sched

from utils import *

sem1 = drake.sched.Semaphore(0)
sem2 = drake.sched.Semaphore(0)
sem3 = drake.sched.Semaphore(0)

# Build root
#   Build shield
#     Build failed (blocks on sem1) [1]
#     Build delayed (blocks on sem3) [2]
#     Build interrupted (unblocks sem1, blocks on sem3) [3]
#     Build failed: failure [4]
#     Build delayed: cleanup is delayed (blocks on sem3)
#     Build interrupted: build is terminated. This is where the bug
#       used to lie: the builder was considered successful. [5]
#  Build intermediate: since we are still unwinding thank to
#    delayed. The bug was triggered here: interrupted was considered
#    built and the copy was launched on a missing file. [6]

class FailBuilder(drake.Builder):

  def execute(self):
    sem1.lock() # [1]
    return False # [4]

class DelayBuilder(drake.Builder):

  def execute(self):
    try:
      sem3.lock() # [2]
    except:
      sem3.lock() # [5]
      raise
    raise Exception('should never get there')

class InterruptedBuilder(drake.Builder):

  def execute(self):
    sem1.unlock() # [3]
    try:
      sem2.lock() # [3]
    except:
      raise
    raise Exception('should never get there')

beacon = True
class UnblockBuilder(drake.Copy):

  def run(self):
    sem3.unlock()
    super().run()

  def execute(self):
    global beacon
    beacon = False # [6]
    raise Exception('should never get there')

with Drake(jobs = 2, kill_builders_on_failure = True) as d:
  failed = drake.node('failed')
  failer = FailBuilder([], [failed])
  interrupted = drake.node('interrupted')
  interrupter = InterruptedBuilder([], [interrupted])
  delayed = drake.node('delayed')
  delayer = DelayBuilder([], [delayed])
  shield = drake.node('shield')
  TouchBuilder([failed, delayed, interrupted], [shield])
  intermediate = drake.copy([interrupted], 'intermediate',
                            builder = UnblockBuilder)[0]
  root = drake.node('root')
  TouchBuilder([shield, intermediate], [root])
  try:
    root.build()
  except drake.Builder.Failed as e:
    assert beacon
    assert e.builder is failer
  else:
    raise Exception('build should have failed')
