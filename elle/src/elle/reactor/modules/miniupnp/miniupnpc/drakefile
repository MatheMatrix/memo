import drake
import drake.cxx

import os
import sys

library = None
config = None
rule_build = None
rule_install = None

def configure(cxx_toolkit = None,
              cxx_config = drake.cxx.Config(),
              prefix = '/usr',
              archs = []):
  global library, rule_build, rule_install, config
  libminiupnp_sources = drake.nodes(
    'miniupnpc.h',
    'miniwget.h',
    'upnpcommands.h',
    'igd_desc_parse.h',
    'upnpreplyparse.h',
    'upnperrors.h',
    'miniupnpctypes.h',
    'portlistingparse.h',
    'declspec.h',
    'miniwget.c',
    'minixml.c',
    'igd_desc_parse.c',
    'minisoap.c',
    'minissdpc.c',
    'miniupnpc.c',
    'upnpreplyparse.c',
    'upnpcommands.c',
    'upnperrors.c',
    'connecthostport.c',
    'portlistingparse.c',
    'receivedata.c',
    )
  #public config
  config = drake.cxx.Config()
  config.add_local_include_path('.')
  config.lib_path('.')
  config.define('MINIUPNP_STATICLIB')
  local_config = drake.cxx.Config(cxx_config)
  local_config.enable_debug_symbols()
  local_config.define('_BSD_SOURCE')
  local_config.define('MINIUPNP_STATICLIB')
  if cxx_toolkit.os is drake.os.windows:
    local_config.lib('iphlpapi')
    config.lib('iphlpapi')
  elif cxx_toolkit.os is drake.os.ios:
    for arch in archs:
      local_config.flag('-arch')
      local_config.flag(arch)
    local_config.flag('-miphoneos-version-min=7.0')
    local_config.flag('--sysroot=%s' % os.environ['SDKROOT'])
  libminiupnp = drake.cxx.StaticLib(
    'lib/miniupnp',
    libminiupnp_sources,
    cxx_toolkit, local_config)
  library = libminiupnp
  rule_build = drake.Rule('build')
  rule_build << libminiupnp
  rule_install = drake.Rule('install')
  rule_install << drake.install(libminiupnp, prefix)
