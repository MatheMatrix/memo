import drake
import drake.cxx
import drake.go
import os

grpc_lib = None
protobuf_lib = None
grpc = None
sources = None
cxx_config_grpc = None
# Used by the website.
memo_vs_proto = None
memo_vs_json = None
# Used internaly.
memo_vs_with_named_proto = None
gen_vs_w_named = None

class GRPCGen(drake.Builder):

  def __init__(self, proto, protoc, targets, plugin = None):
    self.__proto = proto
    if protoc is None:
      self.__protoc = drake.node(drake.which.which('protoc'))
    self.__protoc = protoc
    self.__plugin = plugin
    self.__output = proto.name().dirname()
    srcs = [proto, protoc]
    if plugin:
      srcs.append(plugin)
    super().__init__(srcs, targets)

  @property
  def proto(self):
    return self.__proto

  @property
  def protoc(self):
    return self.__protoc

  @property
  def plugin(self):
    return self.__plugin

  @property
  def output_dir(self):
    return drake.path_build(self.__output)


class GRPCCxxGen(GRPCGen):

  def __init__(self, proto, protoc = None, plugin = None):
    name = proto.name_relative
    dsts = drake.nodes(
      name.with_extension('pb.h'),
      name.with_extension('pb.cc'),
      name.with_extension('grpc.pb.h'),
      name.with_extension('grpc.pb.cc'),
    )
    if plugin is None:
      plugin = drake.node('/usr/local/bin/grpc_cpp_plugin')
    super().__init__(proto, protoc = protoc, plugin = plugin, targets = dsts)

  def execute(self):
    self.cmd('GRPC protoc %s' % self.proto, self.protoc_grpc_cmd, throw = True)
    self.cmd('GRPC protoc cc %s' % self.proto, self.protoc_cc_cmd, throw = True)
    return True

  @property
  def protoc_grpc_cmd(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--grpc_out=%s' % self.output_dir,
      '--plugin=protoc-gen-grpc=%s' % self.plugin.path(),
      self.proto.path(),
    ]

  @property
  def protoc_cc_cmd(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--cpp_out=%s' % self.output_dir,
      self.proto.path(),
    ]

  def hash(self):
    return {
      'grpc-cmd': list(map(str, self.protoc_grpc_cmd)),
      'protoc-cmd': list(map(str, self.protoc_cc_cmd)),
    }


class GRPCPyGen(GRPCGen):

  def __init__(self, proto, protoc = None, plugin = None):
    name = proto.name_relative.without_last_extension()
    dsts = drake.nodes(
      '{}_pb2.py'.format(name),
      '{}_pb2_grpc.py'.format(name),
    )
    if plugin is None:
      plugin = drake.node('/usr/local/bin/grpc_python_plugin')
    super().__init__(proto, protoc = protoc, plugin = plugin, targets = dsts)

  def execute(self):
    self.cmd('GRPC protoc python %s' % self.proto, self.command, throw = True)
    return True

  @property
  def command(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--python_out=%s' % self.output_dir,
      '--grpc_python_out=%s' % self.output_dir,
      '--plugin=protoc-gen-grpc_python=%s' % self.plugin.path(),
      self.proto.path(),
    ]

  def hash(self):
    return list(map(str, self.command))

class GRPCGoGen(GRPCGen):

  def __init__(self, proto, protoc = None, plugin = None, toolkit = None):
    name = proto.name_relative.without_last_extension()
    dsts = drake.nodes(
      name.with_extension('pb.go'),
    )
    srcs = []
    if plugin is None:
      if toolkit is not None:
        if toolkit.os == 'windows':
          plugin = drake.node('%s/bin/%s/protoc-gen-go.exe' % (
            toolkit.path, toolkit.platform_str()))
        else:
          plugin = drake.node('%s/bin/protoc-gen-go' % toolkit.path)
        if not plugin.builder:
          drake.go.FetchPackage(
            url = 'github.com/golang/protobuf/protoc-gen-go',
            toolkit = toolkit,
            targets = [
              plugin,
            ],
          )
      elif os.environ.get('GOPATH'):
        plugin = drake.node('%s/bin/protoc-gen-go' % os.environ['GOPATH'])
      elif os.environ.get('GOROOT'):
        plugin = drake.node('%s/bin/protoc-gen-go' % os.environ['GOROOT'])
    self.__toolkit = toolkit
    super().__init__(proto, protoc = protoc, plugin = plugin, targets = dsts)

  def execute(self):
    self.cmd('GRPC protoc Go %s' % self.proto, self.command, throw = True)
    return True

  @property
  def command(self):
    return [
      self.protoc,
      '-I', self.proto.path().dirname(),
      '--go_out=plugins=grpc:%s' % self.output_dir,
      '--plugin=protoc-gen-go=%s' % self.plugin.path(),
      self.proto.path(),
    ]

  def hash(self):
    return list(map(str, self.command))

def configure(
    cxx_toolkit,
    cxx_config,
    git = None,
):
  global memo_vs_proto, memo_vs_with_named_proto, grpc_lib, grpc, sources, protobuf_lib
  global gen_vs, gen_vs_w_named

  go = drake.go.Toolkit()
  grpc = drake.include(
    'grpc',
    cxx_toolkit,
    cxx_config,
    cmake_vars = {
      # We don't care about the (copious) warnings on macOS.
      'CMAKE_CXX_FLAGS': '-Wno-deprecated-declarations',
      'GO_EXECUTABLE': go.go,
    })

  ## ----------------------------------- ##
  ## Generate .proto file and C++ files. ##
  ## ----------------------------------- ##

  # Render the .proto file from the JSON.
  import json
  def render(j, proto_tmpl, content = None):
    if content is None:
      with open(str(memo_vs_json.path())) as f:
        content = json.load(f)
    with drake.templating.Context(content = {'proto': content},
                                  sources = [j]):
      drake.node(proto_tmpl)
    return content
  # Generate the 'public' memo vs proto file.
  memo_vs_json = drake.Node('memo_vs.json')
  _vs_json = render(memo_vs_json, 'memo_vs.proto.tmpl')
  memo_vs_proto = drake.node('memo_vs.proto')
  gen_vs = GRPCCxxGen(
    memo_vs_proto,
    protoc = grpc.protoc,
    plugin = grpc.grpc_cpp_plugin)
  # Generate the 'private' memo vs proto file that includes NamedBlocks.
  memo_vs_named_json = drake.Node('memo_vs_named_only.json')
  with open(str(memo_vs_named_json.path())) as f:
    _vs_named_json = json.load(f)
  _vs_named_json['services'][0]['rpcs'] += _vs_json['services'][0]['rpcs']
  _vs_named_json['messages'] += _vs_json['messages']
  render(memo_vs_json, 'memo_vs_with_named.proto.tmpl', _vs_named_json)
  memo_vs_with_named_proto = drake.node('memo_vs_with_named.proto')
  gen_vs_w_named = GRPCCxxGen(
    memo_vs_with_named_proto,
    protoc = grpc.protoc,
    plugin = grpc.grpc_cpp_plugin)
  # Sources to compile the server part.
  sources = gen_vs_w_named.targets() + drake.nodes(
    'memo_vs.cc',
    'grpc.cc',
    'serializer.cc',
    'serializer.hh'
  )
  # make a convenience grpc lib with all libgrpc stuff
  protobuf_lib = drake.copy(
    grpc.protobuf_lib, '.', strip_prefix = True)
  grpc_lib = drake.cxx.DynLib(
    'grpc', [protobuf_lib] + grpc.sources,
    cxx_toolkit, grpc.cxx_config_lib)

  ## -------------------- ##
  ## Docker python client ##
  ## -------------------- ##

  git = git or drake.git.Git()

  grpcgen_py = GRPCPyGen(memo_vs_proto,
                         protoc = grpc.protoc,
                         plugin = grpc.grpc_python_plugin)

  docker_path = drake.Path('docker')
  docker_image = drake.docker.DockerImage(
    'docker', 'memo-vs-client-python', git.description())
  docker_file = drake.docker.DockerFile(
    docker_path / 'Dockerfile',
    image = 'alpine',
    maintainer = 'Infinit <contact@infinit.sh>',
    labels = {
      'version': git.description(),
    })
  docker_file.run('apk add --update python3 libgcc' \
                  '&& apk add --virtual build-deps python3-dev gcc g++' \
                  '&& pip3 install grpcio ' \
                  '&& apk del build-deps ' \
                  '&& rm -rf /var/cache/apk/*')
  docker_file.env('PYTHONPATH', '/root')
  docker_file.add(drake.copy([drake.node('memo_vs.py')] + grpcgen_py.targets(),
                             docker_path, strip_prefix = True), '/root/')
  docker_file.entry_point(
    ['/usr/bin/env', 'python3', '-i', '-m', 'memo_vs'])
  drake.docker.DockerBuilder(docker_image, docker_file)

# Local Variables:
# mode: python
# End:
