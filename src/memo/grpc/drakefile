import drake
import drake.cxx
import drake.go
import drake.gRPC
import os

grpc_lib = None
memo_vs_grpc_lib = None
protobuf_lib = None
grpc = None
sources = None
memo_vs_grpc_sources = None
cxx_config_grpc = None
# Used by the website.
memo_vs_proto = None
memo_vs_json = None
# Used internaly.
memo_vs_with_named_proto = None
gen_vs_w_named = None

def configure(
    cxx_toolkit,
    cxx_config,
    git = None,
):
  global memo_vs_proto, memo_vs_with_named_proto, grpc_lib, grpc, sources, protobuf_lib
  global gen_vs, gen_vs_w_named
  global memo_vs_grpc_lib, memo_vs_grpc_sources

  go = drake.go.Toolkit()
  grpc = drake.include(
    'grpc',
    cxx_toolkit,
    cxx_config,
    cmake_vars = {
      # We don't care about the (copious) warnings on macOS.
      'CMAKE_CXX_FLAGS': '-Wno-deprecated-declarations',
      'GO_EXECUTABLE': go.go,
    })

  ## ----------------------------------- ##
  ## Generate .proto file and C++ files. ##
  ## ----------------------------------- ##

  # Render the .proto file from the JSON.
  import json
  def render(j, proto_tmpl, content = None):
    if content is None:
      with open(str(memo_vs_json.path())) as f:
        content = json.load(f)
    with drake.templating.Context(content = {'proto': content},
                                  sources = [j]):
      drake.node(proto_tmpl)
    return content
  # Generate the 'public' memo vs proto file.
  memo_vs_json = drake.Node('memo_vs.json')
  _vs_json = render(memo_vs_json, 'memo_vs.proto.tmpl')
  memo_vs_proto = drake.Node('memo_vs.proto')
  gen_vs = drake.gRPC.CxxGen(
    memo_vs_proto,
    protoc = grpc.protoc,
    plugin = grpc.grpc_cpp_plugin)
  # Generate the 'private' memo vs proto file that includes NamedBlocks.
  memo_vs_named_json = drake.Node('memo_vs_named_only.json')
  with open(str(memo_vs_named_json.path())) as f:
    _vs_named_json = json.load(f)
  _vs_named_json['services'][0]['rpcs'] += _vs_json['services'][0]['rpcs']
  _vs_named_json['messages'] += _vs_json['messages']
  render(memo_vs_json, 'memo_vs_with_named.proto.tmpl', _vs_named_json)
  memo_vs_with_named_proto = drake.node('memo_vs_with_named.proto')
  gen_vs_w_named = drake.gRPC.CxxGen(
    memo_vs_with_named_proto,
    protoc = grpc.protoc,
    plugin = grpc.grpc_cpp_plugin)
  # Sources to compile the server part.
  sources = drake.nodes(
    'grpc.hh',
    'grpc.cc',
    'serializer.cc',
    'serializer.hh'
  )
  # make a convenience grpc lib with all libgrpc stuff
  protobuf_lib = drake.copy(
    grpc.protobuf_lib, '.', strip_prefix = True)
  grpc_lib = drake.cxx.DynLib(
    'grpc', [protobuf_lib] + grpc.sources,
    cxx_toolkit, grpc.cxx_config_lib)
  memo_vs_grpc_sources = sources + gen_vs_w_named.targets() +           \
                         drake.nodes('memo_vs.hh', 'memo_vs.cc')
  memo_vs_grpc_lib = drake.cxx.DynLib(
    'memo_grpc',
    [grpc_lib, protobuf_lib] + memo_vs_grpc_sources,
    cxx_toolkit, grpc.cxx_config_lib)

  ## -------------------- ##
  ## Docker python client ##
  ## -------------------- ##

  git = git or drake.git.Git()

  grpcgen_py = drake.gRPC.PyGen(memo_vs_proto,
                                protoc = grpc.protoc,
                                plugin = grpc.grpc_python_plugin)

  docker_path = drake.Path('docker')
  docker_image = drake.docker.DockerImage(
    'docker', 'memo-vs-client-python', git.description())
  docker_file = drake.docker.DockerFile(
    docker_path / 'Dockerfile',
    image = 'alpine',
    maintainer = 'Infinit <contact@infinit.sh>',
    labels = {
      'version': git.description(),
    })
  docker_file.run('apk add --update python3 libgcc' \
                  '&& apk add --virtual build-deps python3-dev gcc g++' \
                  '&& pip3 install grpcio ' \
                  '&& apk del build-deps ' \
                  '&& rm -rf /var/cache/apk/*')
  docker_file.env('PYTHONPATH', '/root')
  docker_file.add(drake.copy([drake.node('memo_vs.py')] + grpcgen_py.targets(),
                             docker_path, strip_prefix = True), '/root/')
  docker_file.entry_point(
    ['/usr/bin/env', 'python3', '-i', '-m', 'memo_vs'])
  drake.docker.DockerBuilder(docker_image, docker_file)

# Local Variables:
# mode: python
# End:
