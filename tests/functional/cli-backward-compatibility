#!/usr/bin/env python3

import json

from distutils.version import LooseVersion as Version
from itertools import chain
from utils import *
from copy import copy
from operator import itemgetter

from functools import partial

path = os.path.dirname(os.path.realpath(__file__))

_assertEq = assertEq
def assertEq(x, y):
  if isinstance(x, list) and isinstance(y, list):
    keys = set(chain(*[x.keys() for x in chain(x, y)]))
    return _assertEq(
      sorted(x, key=itemgetter(*keys)),
      sorted(y, key=itemgetter(*keys))
    )
  else:
    return _assertEq(x, y)

for version in ['0.3.2', '0.3.5', '0.3.7', '0.4.0', '0.5.0', '0.5.2', '0.5.4']:
  print('# Test version', version)
  version = Version(version)
  with Memo() as t:
    # Copy the hierachie so we can edit it (e.g.: link networks)
    shutil.copytree('%s/backward-compatibility-homes/%s' % (path, version),
                    t.data_home)
    def run(*args, as_user, **kwargs):
      e = {
        'MEMO_USER': as_user
      }
      return t.run_json(env = e, args = list(args) + ['--script'], **kwargs)
    user = partial(run, as_user = 'user')
    ## ---- ##
    ## User ##
    ## ---- ##
    users = user('user', 'list')
    print(users)
    assertEq(users, [
      { 'name': 'other', 'has_private_key': True },
      { 'name': 'owner', 'has_private_key': False },
      { 'name': 'user', 'has_private_key': True },
    ])

    # User 'user'.
    u = user('user', 'export', '--name', 'user', '--full')
    assertEq(u['name'], 'user')
    assertIn('public_key', u)
    assertIn('rsa', u['public_key'])
    assertIn('private_key', u)
    assertIn('rsa', u['private_key'])
    # User 'owner'.
    o = user('user', 'export', '--name', 'owner')
    assertEq(o['name'], 'owner')
    assertIn('public_key', o)
    assertIn('rsa', o['public_key'])

    ## -------- ##
    ## Networks ##
    ## -------- ##
    networks = user('network', 'list')
    assertEq(networks,
             [
               {'name': 'owner/network1', 'linked': False},
               {'name': 'owner/network0', 'linked': True}
             ])
    # Network 'network1'.
    try:
      network1 = user('network', 'export', '--name', 'owner/network1')
      assert False
    except Exception:
      pass
    # Network 'network0'.
    network0 = user('network', 'export', '--name', 'owner/network0')
    assertEq(network0['name'], 'owner/network0')
    assertEq(network0['owner']['rsa'], o['public_key']['rsa'])
    if version < Version('0.4.0'):
      assertEq(network0['version'], '0.3.0')
    else:
      assertEq(network0['version'], str(version))

    ## --------- ##
    ## Passports ##
    ## --------- ##
    passports = user('passport', 'list')
    assertEq(passports, [
      {'network': 'owner/network1', 'user': 'other'},
      {'network': 'owner/network1', 'user': 'user'},
      {'network': 'owner/network0', 'user': 'user'}
    ])
    for passport in map(
        lambda network: user('passport', 'export',
                            '--user', 'user', '--network', network),
        [passport['network'] for passport in passports]):
      assertEq(passport['allow_sign'], False)
      assertEq(passport['allow_storage'], True)
      assertEq(passport['allow_write'], True)
      assertEq(passport['network'][:-1], 'owner/network')
      assertEq(passport['user']['rsa'], u['public_key']['rsa'])

    ### Fakely link passport.
    user('network', 'link', '--name', 'owner/network1',
        '--output', '-')
    ### Really link the network.
    user('network', 'link', '--name', 'owner/network1')
    # Network 'network1'.<
    network1 = user('network', 'export', '--name', 'owner/network1')
    assertEq(network1['name'], 'owner/network1')
    assertEq(network1['owner']['rsa'], o['public_key']['rsa'])

    ## --------- ##
    ## Same home ##
    ## --------- ##

    # Use a previously linked network.
    other = partial(run, as_user = 'other')
    assertEq(other('network', 'list'), [
      { 'name': 'owner/network0', 'linked': False },
      { 'name': 'owner/network1', 'linked': False },
    ])
    other('network', 'link', 'owner/network1')
    # Other should have his owner/network0 linked.
    assertEq(other('network', 'list'), [
      { 'name': 'owner/network0', 'linked': False },
      { 'name': 'owner/network1', 'linked': True },
    ])
    # User should still have both networks linked.
    assertEq(user('network', 'list'), [
      { 'name': 'owner/network0', 'linked': True },
      { 'name': 'owner/network1', 'linked': True },
    ])

    # New user in the same home.
    new = partial(run, as_user = 'new')
    new('user', 'create', '--name', 'new')
    assertEq(new('network', 'list'), [
      { 'name': 'owner/network0', 'linked': False },
      { 'name': 'owner/network1', 'linked': False },
    ])
    throws(lambda: new('network', 'link', 'owner/network0'))
    throws(lambda: new('network', 'link', 'owner/network1'))
    new('network', 'create', '--name', 'network')
    assertEq(new('network', 'list'), [
      { 'name': 'new/network', 'linked': True },
      { 'name': 'owner/network0', 'linked': False },
      { 'name': 'owner/network1', 'linked': False },
    ])
    assertEq(other('network', 'list'), [
      { 'name': 'new/network', 'linked': False },
      { 'name': 'owner/network0', 'linked': False },
      { 'name': 'owner/network1', 'linked': True },
    ])
    assertEq(user('network', 'list'), [
      { 'name': 'new/network', 'linked': False },
      { 'name': 'owner/network0', 'linked': True },
      { 'name': 'owner/network1', 'linked': True },
    ])

    ## -------------- ##
    ## Network delete ##
    ## -------------- ##
    assertEq(
      user('network', 'list'),
      [
        { 'name': 'new/network', 'linked': False },
        { 'name': 'owner/network0', 'linked': True },
        { 'name': 'owner/network1', 'linked': True },
      ])
    # Network is still linked for other.
    throws(lambda: user('network', 'delete', '--name', 'owner/network1'))
    # Unlink it.
    user('network', 'unlink', '--name', 'owner/network1')
    # Can't unlink it twice.
    throws(lambda: user('network', 'unlink', '--name', 'owner/network1'))
    assertEq(
      user('network', 'list'),
      [
        { 'name': 'new/network', 'linked': False },
        { 'name': 'owner/network0', 'linked': True },
        { 'name': 'owner/network1', 'linked': False },
      ])
    # User can create a network (and is automatically linked with it) and
    # delete it direct.
    user('network', 'create', '--kelips', '--name', 'network')
    assertEq(
      user('network', 'list'),
      [
        { 'name': 'new/network', 'linked': False },
        { 'name': 'owner/network0', 'linked': True },
        { 'name': 'owner/network1', 'linked': False },
        { 'name': 'user/network', 'linked': True },
      ])
    user('network', 'delete', '--name', 'user/network', '--unlink')
    assertEq(
      user('network', 'list'),
      [
        { 'name': 'new/network', 'linked': False },
        { 'name': 'owner/network0', 'linked': True},
        { 'name': 'owner/network1', 'linked': False },
      ])
