#!/usr/bin/env python3

import os
from utils import *
import re

home = os.path.abspath(os.environ['MEMO_HOME_ROOT'])
leftovers = os.path.join(home, 'leftovers')

# We will set MEMO_HOME to our source tree, yet we don't want it to be
# polluted with logs.
cache_dir = TemporaryDirectory("memo-cache-home")
os.environ['MEMO_CACHE_HOME'] = cache_dir.dir

def read_result(name, formatting = {}):
  with open(os.path.join(os.path.dirname(home), 'results', '%s.script' % name), 'r') as f:
    script = f.read() % formatting
  script = json.loads(script)
  with open(os.path.join(os.path.dirname(home), 'results', '%s.out' % name), 'r') as f:
    output = f.read() % formatting
    output = output.strip().replace('\r', '').split('\n')
  return script, output

expectations = {
  # Unknown user (user doesn't exist).
  'unknown_user': (1, read_result('unknown_user')),
  # Public user (user has no private key)
  'public_user': (1, read_result('public_user')),
  # Credentials for aws_storage missing.
  'missing_credentials': (1, read_result('missing_credentials')),
  # Check leftovers in the home.
  # 'leftovers': (0, read_result('leftovers', {'leftovers': leftovers})),
  # Storage aws_storage deleted.
  'missing_storage': (1, read_result('missing_storage')),
  # Everything ok.
  'ok': (0, read_result('ok'))
}

# Path are hard to manage with wine. Just check if the important elements are
# present in the output.
def leftovers_json(res):
  leftovers = sorted(res['leftovers'], key = lambda k: k['name'])
  assertIn('leftovers', leftovers[0]['name'])
  assertIn('foo', leftovers[0]['name'])
  leftovers[0]['name'] = 'foo'
  assertIn('leftovers', leftovers[1]['name'])
  assertIn('linked_networks', leftovers[1]['name'])
  assertIn('bar', leftovers[1]['name'])
  leftovers[1]['name'] = 'linked_networks/bar'
  res['leftovers'] = leftovers
  return res

def leftovers_text(res):
  assertIn('leftovers', res[4])
  assertIn('foo', res[4])
  res[4] = '  [WARNING] foo'
  assertIn('leftovers', res[5])
  assertIn('linked_networks', res[5])
  assertIn('bar', res[5])
  res[5] = '  [WARNING] linked_networks/bar'
  return res

import subprocess
for home, (i, (json_output, text_output)) in expectations.items():
  memo = Memo(home = os.path.join(os.environ['MEMO_HOME_ROOT'], home))
  res = memo.run_json(['doctor', 'configuration',  '--script', '--as', 'bob'],
                         return_code = i)
  if home == 'leftovers':
    res = leftovers_json(res)
  assertEq(res, json_output)
  output = memo.run(['doctor', 'configuration',  '--as', 'bob', '--no-color'],
                         return_code = i)[0].strip().replace('\r', '').split('\n')
  if i == 0:
    output = output[:-2]
  output = list(map(lambda x: re.sub(r' +$', '', x), output))
  if home == 'leftovers':
    output = leftovers_text(output)
  assertEq(output, text_output)
