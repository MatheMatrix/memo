#!/usr/bin/env python3

from utils import *
from math import *

def static_vars(**kwargs):
  def decorate(func):
    for k in kwargs:
      setattr(func, k, kwargs[k])
    return func
  return decorate

quals = ['kb', 'kib', 'Kib', 'KiB',
         'mb', 'mib', 'Mib', 'MiB',
         'gb', 'gib', 'Gib', 'GiB',
         'tb', 'tib', 'Tib', 'TiB',
         'b', 'B']

kb = pow(2, 10)
mb = pow(2, 20)
gb = pow(2, 30)
tb = pow(2, 40)

quals_to = [1000, 1024, 1024, 1024,
            1000000, mb, mb, mb,
            1000000000, gb, gb, gb,
            1000000000000, tb, tb, tb,
            1, 1]

def convert(size):
  global quals
  for qual in quals:
    index = size.find(qual)
    if index != -1:
      return (float(size[:index]), size[index:])
  return (float(size),'')

def unformat(size):
  global quals
  global quals_to
  size, qual = convert(size)
  if qual == '':
    return round(size)
  return round(size * quals_to[quals.index(qual)])


@static_vars(name = -1)
def test(memo, size, description = False):
  global quals
  import json
  for qual in quals:
    test.name += 1
    hsize = "%s%s" % (size, qual)
    args = [
      'silo', 'create', 'filesystem', str(test.name),
      '--capacity', hsize,
    ]
    if description:
      args += ['--description', 'some storage']
    memo.run(args)
    with open('%s/.local/share/infinit/memo/silos/%s' %
              (memo.dir, str(test.name)), 'r') as conf:
      j = json.loads(''.join(conf.readlines()))
      assertEq(j['capacity'], unformat(hsize))
      if description:
        assertEq(j['description'], 'some storage')
      else:
        assertEq(j.get('description', None), None)

with Memo() as bob:
  test(bob, '0', True)
  test(bob, '1', True)
  test(bob, '42')
  test(bob, '408')
  test(bob, '1024')
  test(bob, '101010')
  test(bob, '1010101')
  test(bob, '6.25')

# Purge.
with Beyond() as beyond, Memo(beyond = beyond) as tmp:
  bob = User(memo = tmp, name = 'bob')
  alice = User(memo = tmp, name = 'alice')
  bob.run(['user', 'signup', 'bob', '--email', 'bob@infinit.io'])
  alice.run(
    ['user', 'signup', 'alice', '--email', 'alice@infinit.io'])
  bob.run(['silo', 'create', 'filesystem', '--as', 'bob', 's'])
  assertEq(len(bob.run_json(['silo', 'list', '-s'])), 1)
  bob.run(['network', 'create', '--as', 'bob', 'n', '-S', 's', '-p'])
  assert os.path.exists('%s/bob/bob/n' % tmp.linked_networks_path)
  assertEq(len(bob.run_json(['network', 'list', '-s', '--as', 'bob'])), 1)
  bob.run(['passport', 'create', '--as', 'bob',
           '-u', 'alice', '-N', 'n'])
  alice.run(['network', 'link', '--as', 'alice', 'bob/n', '-S', 's'])
  assert os.path.exists('%s/alice/bob/n' % tmp.linked_networks_path)
  bob.run(['network', 'run', '--name', 'n', '--as', 'bob',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/bob/bob/n' % tmp.state_path)), 2)
  bob.run(['silo', 'delete', 's', '--as', 'bob', '--purge'])
  assertEq(len(bob.run_json(['silo', 'list', '-s', '--as', 'bob'])), 0)
  # Ensure the descriptor is still there.
  assertEq(len(os.listdir(tmp.networks_path)), 1)
  # Ensure linked network has been removed.
  assert not os.path.exists('%s/bob/bob/n' % tmp.linked_networks_path)
  assert not os.path.exists('%s/alice/bob/n' % tmp.linked_networks_path)
  # Ensure network cache has been removed.
  assertEq(len(os.listdir('%s/cache/bob' % tmp.state_path)), 0)
