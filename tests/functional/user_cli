#!/usr/bin/env python3

from utils import *
import json

# Using hub to retreive a user.
with Beyond() as b, Memo(beyond = b) as bob, Memo(beyond = b) as alice:
  bob.run(['user', 'signup',
           '--name', 'bob', '--email', 'bob@infinit.io'])
  alice.run(['user', 'signup', '--full',
             '--name', 'alice', '--email', 'alice@infinit.io',
             '--password', 'loremipsword',
             '--description', 'something about this person'])
  try:
    bob.run(['user', 'export', '--name', 'alice'])
    unreachable()
  except Exception as e:
    pass
  bob.run(['user', 'fetch', '--name', 'alice'])
  res = bob.run_json(['user', 'export', '--name', 'alice'])
  assertEq(res['description'], 'something about this person')

## ----------------- ##
## Login / Push full ##
## ----------------- ##
# Using login.
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  alice.run(['user', 'signup', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--password', 'loremipsword'])
  alice_json = alice.run_json(
    ['user', 'export', '--name', 'alice', '--full'])
  alice2.run(['user', 'login',
              '--name', 'alice',
              '--password', 'loremipsword'])
  alice2_json = alice2.run_json(
    ['user', 'export', '--full', '--name', 'alice'])
  # XXX: Fix missing email.
  del alice_json['email']
  del alice2_json['email']
  assertEq(alice_json, alice2_json)

# Push --full.
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'push', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--password', 'loremipsword'])
  alice_json = alice.run_json(
    ['user', 'export', '--name', 'alice', '--full'])
  alice2.run(['user', 'login',
              '--name', 'alice',
              '--password', 'loremipsword'])
  alice2_json = alice2.run_json(
    ['user', 'export', '--full', '--name', 'alice'])
  # XXX: Fix missing email.
  # del alice_json['email']
  # del alice2_json['email']
  assertEq(alice_json, alice2_json)

# Push without --full.
with Beyond() as b, Memo(beyond = b) as alice:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'push',
             '--name', 'alice',
             '--email', 'alice@infinit.io'])
  alice_json = alice.run_json(
    ['user', 'export', '--name', 'alice', '--full'])
  try:
    alice.run(['user', 'login', '--name', 'alice',
               '--password', 'loremipsword'])
    unreachable()
  except Exception as e:
    assertIn('doesn\'t use the hub to login', e.args[0])

# Read password from stdin (signup).
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io'],
            input = 'loremipsword')
  alice2.run(['user', 'login',
              '--name', 'alice',
              '--password', 'loremipsword'])

# Read password from stdin (login).
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--password', 'loremipsword'])
  alice2.run(['user', 'login', '--name', 'alice'],
             input = 'loremipsword')

# Read password from stdin (both).
with Beyond() as beyond, TemporaryDirectory() as tmp,  \
     Memo(beyond = beyond) as alice, Memo(beyond = beyond) as alice2:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'push',
             '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io'],
            input = 'loremipsword')
  alice2.run(['user', 'login', '--name', 'alice'],
             input = 'loremipsword')

# Check invalid emails, allow pushing without email.
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  try:
    alice.run(['user', 'signup', '--name', 'alice', '--email', 'foo@'])
    unreachable()
  except Exception as e:
    assertIn('invalid email address', e.args[0])
  # Ensure user can be pushed without email address.
  alice.run(['user', 'signup', '--name', 'alice'])
  alice.run(['user', 'create', '--name', 'alice2', '--push'])

# Password missmatch.
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as alice2:
  alice.run(['user', 'signup', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--password', 'loremipsword'])
  try:
    alice2.run(['user', 'login',
                '--name', 'alice',
                '--password', 'not_password'])
    unreachable()
  except Exception as e:
    assertIn('password do not match', e.args[0])

# Pull a user that is not you.
with Beyond() as b, Memo(beyond = b) as alice, Memo(beyond = b) as bob:
  alice.run(['user', 'signup', '--full',
             '--name', 'alice',
             '--email', 'alice@infinit.io',
             '--password', 'loremipsword'])
  bob.run(['user', 'signup',
           '--name', 'bob',
           '--email', 'bob@infinit.io'])
  alice.run(['user', 'fetch', '--name', 'bob'])
  try:
    alice.run(['user', 'pull', '--as', 'bob'])
    unreachable()
  except Exception as e:
    assertIn('no private key', e.args[0])

# Invalid user name.
with Beyond() as b, Memo(beyond = b) as bob, Memo(beyond = b) as alice:
  def create_with_name(name):
    bob.run(['user', 'create',
               '--name', name, '--email', '%s@infinit.io' % name])

  def create_with_name_throw(name):
    try:
      create_with_name(name)
      unreachable()
    except Exception as e:
      pass

  for name in ['bob', 'alice', 'eve_2', 'o', 'o2', 'first.last', 'first_last',
               'first-last', '_xxx_german_nickname_xxx_', '-dash', 'x' * 128,
               '2zio', '-lol-']:
    create_with_name(name)

  for name in ['Bob', 'accént', 'char+acter', 's/ash', '5tartWithADigit',
               '.start', '*', ' whitespace', '..', 'ру́сский', '汉语', 'にほん',
               'saṃskṛtam', 'it\'s', 'white space', '"ok"', 'o"k', 'x' * 129,
             ]:
    create_with_name_throw(name)

# Deleting users.
with Beyond() as b, Memo(beyond = b) as alice:
  alice.run(['user', 'create', '--name', 'alice'])
  # Test prompt for deleting a user.
  alice.run(['user', 'create', '--name', 'bob'])
  try:
    alice.run(['user', 'delete', '--name', 'bob'],
              input = 'alice', noscript = True)
    unreachable()
  except Exception as e:
    pass
  alice.run(['user', 'delete', '--name', 'bob'],
            input = 'bob', noscript = True)
  # Test deleting user with --force and then deleting a user with only a public
  # key.
  alice.run(
    ['user', 'create', '--name', 'eve', '--email', 'eve@infinit.io'])
  alice.run(['user', 'push', '--name', 'eve'])
  alice.run(['user', 'delete', 'eve', '--script'])
  alice.run(['user', 'fetch', '--name', 'eve'])
  alice.run(['user', 'delete', 'eve'])

# Pulling users.
with Beyond() as b, Memo(beyond = b) as alice:
  alice.run(['user', 'create', '--name', 'alice'])
  alice.run(['user', 'create', '--name', 'bob'])
  alice.run(
    ['user', 'push', '--name', 'bob', '--email', 'bob@infinit.io'])
  # In the future, we may have a chain of trust allowing a user to pull another.
  try:
    alice.run(['user', 'pull', '--name', 'bob'])
    unreachable()
  except Exception as e:
    pass
  alice.run(['user', 'pull', '--as', 'bob', '--name', 'bob'])

# Pull and delete.
with Beyond() as beyond, \
    Memo(beyond = beyond) as bob, \
    Memo(beyond = beyond) as alice:
  bob.run(
    ['user', 'signup', '--name', 'bob', '--email', 'bob@infinit.io'])
  alice.run(['user', 'create', '--name', 'alice'])
  # Local and Beyond.
  bob.run(
    ['user', 'delete', '--as', 'bob', '--name', 'bob', '--pull'],
    input = 'bob')
  assertEq(len(bob.run_json(['user', 'list', '-s'])), 0)
  alice.run(['user', 'fetch', '--as', 'alice', '--name', 'bob'],
            return_code = 1)
  # Local only.
  alice.run(
    ['user', 'delete', '--as', 'alice', '--name', 'alice', '--pull'],
    input = 'alice')
  assertEq(len(alice.run_json(['user', 'list', '-s'])), 0)

# Purge.
with Beyond() as beyond, \
    Memo(beyond = beyond) as bob, \
    Memo(beyond = beyond) as alice:
  from os import path
  bob.run(['user', 'signup', 'b', '--email', 'b@infinit.io'])
  alice.run(['user', 'signup', 'a', '--email', 'b@infinit.io'])
  # Create basic infrastructure.
  bob.run(['silo', 'create', 'filesystem', '--as', 'b', 's'])
  bob.run(
    ['network', 'create', '--as', 'b', 'n', '--silo', 's', '-p'])
  assert path.exists('%s/b/n' % bob.networks_path)
  assert path.exists('%s/b/b/n' % bob.linked_networks_path)
  bob.run(['network', 'run', '--name', 'n', '--as', 'b',
           '--async', '--cache', '-s'])
  assertEq(len(os.listdir('%s/cache/b/b/n' % bob.state_path)), 2)
  bob.run(['user', 'fetch', '--as', 'b', 'a'])
  bob.run(
    ['passport', 'create', '--as', 'b', '-u', 'a', '-N', 'n', '-p'])
  assert path.exists('%s/b/n/a' % bob.passports_path)
  # Create volume and drive with another owner on bob's network.
  alice.run(['network', 'fetch', '--as', 'a'])
  assertEq(len(alice.run_json(['network', 'list', '-s', '--as', 'a'])), 1)
  alice.run(['passport', 'fetch', '--as', 'a'])
  assertEq(len(alice.run_json(['passport', 'list', '-s', '--as', 'a'])), 1)
  alice.run(['network', 'link', '--as', 'a', 'b/n'])
  alice.run(['network', 'delete', '--as', 'a', 'b/n', '--unlink'])
  alice.run(
    ['passport', 'delete', '--as', 'a', '-N', 'b/n', '-u', 'a'])
  # Create new network and invite bob.
  alice.run(['network', 'create', '--as', 'a', 'n', '-p'])
  alice.run(['user', 'fetch', 'b'])
  alice.run(['passport', 'create', '--as', 'a',
             '-N', 'n', '-u', 'b', '-p'])
  bob.run(['passport', 'fetch', '--as', 'b'])
  assertEq(len(bob.run_json(['passport', 'list', '-s', '--as', 'b'])), 2)
  assert path.exists('%s/a/n/b' % bob.passports_path)
  bob.run(['network', 'fetch', '--as', 'b'])
  bob.run(['network', 'link', 'a/n', '--as', 'b'])
  assert path.exists('%s/b/a/n' % bob.linked_networks_path)
  # Nuke bob.
  bob.run(['user', 'delete', '--as', 'b', '--name', 'b',
           '--pull', '--purge'],
          input = 'b')
  # Check that elements have been removed.
  assert path.exists('%s/a/n' % bob.networks_path)
  assert not path.exists('%s/b/n' % bob.networks_path)
  assert not path.exists('%s/b/b/n' % bob.linked_networks_path)
  assert not path.exists('%s/b/a/n' % bob.linked_networks_path)
  assert not path.exists('%s/b/n/a' % bob.passports_path)
  assert not path.exists('%s/a/n/b' % bob.passports_path)
  assertEq(len(os.listdir('%s/cache/b' % bob.state_path)), 0)

# User by hash.
with Beyond() as beyond, Memo(beyond = beyond) as alice:
  alice.run(['user', 'signup', 'alice',
             '--email', 'alice@infinit.sh'])
  user = alice.run_json(['user', 'export', 'alice'])
  key_hash = alice.run_json(
    ['user', 'hash', '-s', '--name', 'alice'])['alice']
  alice.run(['user', 'delete', '--as', 'alice', '--name', 'alice'],
            input = 'alice')
  assertEq(len(alice.run_json(['user', 'list', '-s'])), 0)
  alice.run(['user', 'fetch', key_hash])
  fetched_user = alice.run_json(
    ['user', 'export', '-s', '--name', 'alice'])
  assertEq(fetched_user, user)
