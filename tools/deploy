#!/usr/bin/env python3

import datetime
import os
import requests
import subprocess
import sys


gcs_login = ''

tmp = os.environ.get('TMPDIR', '/tmp')

def parse_options():
  import argparse
  # Parse options
  parser = argparse.ArgumentParser(
    description = 'deploy memo packages')
  parser.add_argument('--version',
                      metavar = 'VERSION',
                      required = True,
                      type = str,
                      help = 'version to deploy')
  parser.add_argument('--gcs-login',
                      metavar = 'LOGIN',
                      required = True,
                      type = str,
                      help = 'The gcs login')
  parser.add_argument('--gcs-key-file',
                      metavar = 'KEYFILE',
                      required = True,
                      type = str,
                      help = 'The path to the gcs key')
  return parser.parse_args()

options = parse_options()
gcs_login = options.gcs_login
version = options.version
with open(options.gcs_key_file, 'r') as keyfile:
  gcs_key = keyfile.read().strip()

url = 'https://debian.infinit.sh/pool/trusty/main/i/memo'
deb = 'memo_%s_amd64.deb' % version

deb_path = '%s/%s' % (tmp, deb)
if not os.path.exists(deb_path):
  url = '%s/%s' % (url, deb)
  print('Download %s' % url)
  r = requests.get(url, stream = True)
  if r.status_code != 200:
    raise Exception('error %s dowloading %s' % (r.status_code, url))
  with open(deb_path, 'wb') as f:
    for chunk in r:
      f.write(chunk)

print('Unpack %s' % deb_path)
subprocess.check_call(['dpkg', '-x', deb_path,
                       '%s/memo-%s' % (tmp, version)])
reported = subprocess.check_output(
  ['%s/memo-%s/opt/memo/bin/memo' % (tmp, version),
   '--version'])
if reported.decode().strip() != version:
  raise Exception('reported version is different: %s' % reported)

basename = 'memo-x86_64-linux_debian_oldstable-gcc4-%s' % version
tarball = '%s/%s.tbz' % (tmp, basename)
print('Pack %s' % tarball)
subprocess.check_call([
  'tar', '-cjf', tarball,
  '-C', '%s/memo-%s/opt' % (tmp, version),
  'memo', '--transform', 's/^memo/%s/' % basename,
  '--show-stored-names'])

import infinit.beyond.gcs
gcs = infinit.beyond.gcs.GCS(
  bucket_ns = 'sh_memo',
  login = gcs_login,
  key = bytes(gcs_key, 'UTF-8'))

print('Upload to GCS')
with open(tarball, 'rb') as f:
  gcs.upload(
    'releases', 'linux64/%s.tbz' % basename,
    data = f.read(),
    content_type = 'application/x-bzip-compressed-tar',
    public = True,
  )
